// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using learn_Russian_API.Presistence;

namespace learn_Russian_API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210224183230_updateArticleContentt")]
    partial class updateArticleContentt
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("learn_Russian_API.Models.Content.DemoContents.DemoContentsModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("DemonstrationContentsId")
                        .HasColumnType("bigint");

                    b.Property<string>("src")
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DemonstrationContentsId");

                    b.ToTable("DemoContentsModel");
                });

            modelBuilder.Entity("learn_Russian_API.Models.TeacherGroup.Create.TeacherGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("teaching_time")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("TeacherGroups");
                });

            modelBuilder.Entity("learn_Russian_API.Presistence.Entities.Answer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Answers")
                        .HasColumnType("text");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<long?>("TrainingId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TrainingId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("learn_Russian_API.Presistence.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("learn_Russian_API.Presistence.Entities.Content", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("DemonstrationContentID")
                        .HasColumnType("bigint");

                    b.Property<JsonDocument>("article")
                        .HasColumnType("jsonb");

                    b.Property<string>("author")
                        .HasColumnType("text");

                    b.Property<long>("categoryID")
                        .HasColumnType("bigint");

                    b.Property<string>("coverImage")
                        .HasColumnType("text");

                    b.Property<DateTime>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isArticle")
                        .HasColumnType("boolean");

                    b.Property<bool>("isDemo")
                        .HasColumnType("boolean");

                    b.Property<string>("subtitle")
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DemonstrationContentID");

                    b.HasIndex("categoryID");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("learn_Russian_API.Presistence.Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("learn_Russian_API.Presistence.Entities.DemonstrationContents", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("Id");

                    b.ToTable("DemonstrationContentses");
                });

            modelBuilder.Entity("learn_Russian_API.Presistence.Entities.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("learn_Russian_API.Presistence.Entities.Statistic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BackToArticleCount")
                        .HasColumnType("integer");

                    b.Property<int>("PercentageCorrectAnswers")
                        .HasColumnType("integer");

                    b.Property<int>("PercentageIncorrectAnswers")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TrainingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("learn_Russian_API.Presistence.Entities.Training", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string[]>("Questions")
                        .HasColumnType("text[]");

                    b.Property<long?>("TrainingContentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TrainingContentId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("learn_Russian_API.Presistence.Entities.TrainingContent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AnswerTypes")
                        .HasColumnType("integer");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("coverImage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TrainingContents");
                });

            modelBuilder.Entity("learn_Russian_API.Presistence.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<long?>("TeacherGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("created")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("learn_Russian_API.Models.Content.DemoContents.DemoContentsModel", b =>
                {
                    b.HasOne("learn_Russian_API.Presistence.Entities.DemonstrationContents", null)
                        .WithMany("DemostrationContentses")
                        .HasForeignKey("DemonstrationContentsId");
                });

            modelBuilder.Entity("learn_Russian_API.Presistence.Entities.Answer", b =>
                {
                    b.HasOne("learn_Russian_API.Presistence.Entities.Training", null)
                        .WithMany("Answers")
                        .HasForeignKey("TrainingId");
                });

            modelBuilder.Entity("learn_Russian_API.Presistence.Entities.Content", b =>
                {
                    b.HasOne("learn_Russian_API.Presistence.Entities.DemonstrationContents", null)
                        .WithMany()
                        .HasForeignKey("DemonstrationContentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("learn_Russian_API.Presistence.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("categoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("learn_Russian_API.Presistence.Entities.Training", b =>
                {
                    b.HasOne("learn_Russian_API.Presistence.Entities.TrainingContent", null)
                        .WithMany("Trainings")
                        .HasForeignKey("TrainingContentId");
                });

            modelBuilder.Entity("learn_Russian_API.Presistence.Entities.DemonstrationContents", b =>
                {
                    b.Navigation("DemostrationContentses");
                });

            modelBuilder.Entity("learn_Russian_API.Presistence.Entities.Training", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("learn_Russian_API.Presistence.Entities.TrainingContent", b =>
                {
                    b.Navigation("Trainings");
                });
#pragma warning restore 612, 618
        }
    }
}
